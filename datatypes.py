import uuid
from typing import Optional, Literal, TypeVar, TypeAlias, Any

from pydantic import BaseModel, Field, ConfigDict

from enums import DealType, Category, OfferType, Renovation

T = TypeVar('T')
MultipleParametersAllowed: TypeAlias = tuple[T, ...]
RangeInt: TypeAlias = tuple[Optional[int], Optional[int]]


def build_gte_lte_dict(prefix: str, name: str, values: tuple[int, int]) -> dict:
    """
    Returns dictionary according to Domclick querystring notation for values with range.

    :param prefix: prefix of query parameter (e.g. **sale**\_price or **square**\_price)
    :param name: name of parameter
    :param values: range (upper and lower limits, ``None`` for no limit)
    """
    return {
        f'{prefix}{"_" if prefix else ""}{name}__gte': values[0],
        f'{prefix}{"_" if prefix else ""}{name}__lte': values[1]
    }


class SearchParameters(BaseModel):
    city: Optional[str] = None
    deal_type: DealType
    category: Category
    offer_type: Optional[MultipleParametersAllowed[OfferType]] = None
    price: Optional[RangeInt] = None
    price_type: Literal['sale', 'square'] = 'sale'
    area: Optional[RangeInt] = None
    living_area: Optional[RangeInt] = None
    renovation: Optional[MultipleParametersAllowed[Renovation]] = None
    has_lifts: Optional[bool] = None
    has_freight_lifts: Optional[bool] = None
    
    address: str  # generated by domclick TODO find out how to generate or get it with specified `city` field

    #  ... there are more parameters I`m not dive into since I ignore them while searching, but list can be expanded
    
    def _proceed(self, k, v) -> dict:
        if k in ['price_type', 'city', ]:  # TODO can I use some pydantic features here to ignore some fields?
            return {}

        if isinstance(v, tuple) and (isinstance(v[0], int) or isinstance(v[1], int)):
            if k == 'price':
                return build_gte_lte_dict(self.price_type, k, v)
            else:
                return build_gte_lte_dict('', k, v)

        return {k: v}

    @property
    def q(self):
        output = {}
        for k, v in self.__dict__.items():
            output.update(self._proceed(k, v))

        return {k: v for k, v in output.items() if v}


class Offer(BaseModel):
    pass


class DomclickLocality(BaseModel):
    id: int
    kind: str
    guid: uuid.UUID
    name: str
    display_name: str
    subkind: Optional[str] = None
    parent_id: Optional[int] = None


class DomclickInfo(BaseModel):
    timezone: str
    timezone_offset: float


class DomclickAddress(BaseModel):
    id: int
    kind: str
    guid: str
    name: str
    display_name: str
    position: dict[Literal['lat', 'lon'], float]
    locality: DomclickLocality
    subways: Optional[list] = None
    info: DomclickInfo
    short_display_name: str
    parent_id: Optional[int] = None


class DomclickObjectInfo(BaseModel):
    rooms: int
    area: float
    max_floor: Optional[int] = None
    min_floor: Optional[int] = None
    is_apartment: Optional[bool] = None


class DomclickTelephonyData(BaseModel):
    redirect_type: str
    has_problem: bool
    complex_id: int
    campaign_id: Optional[int] = None
    b_number: str
    r_number: str


class DomclickBuilding(BaseModel):
    id: int
    name: str
    end_build_year: Optional[int] = None
    end_build_quarter: Optional[int] = None
    complex_product: Optional[bool] = None
    released: bool
    is_unsafe: Optional[bool] = None
    accreditation: Optional[bool] = None


class DomclickSalesInfo(BaseModel):
    sales_address: Optional[str] = None
    sales_phone: list[str]
    responsible_officer_phone: list[str]


class DomclickObjectClass(BaseModel):
    id: int
    display_name: str


class DomclickComplex(BaseModel):
    id: int
    name: str
    has_mortgage_subsidy: bool
    min_rate: float
    start_build_year: int
    start_build_quarter: int
    first_build_year: int
    first_build_quarter: int
    end_build_year: int
    end_build_quarter: int
    phone: str
    sales_info: DomclickSalesInfo
    object_class: DomclickObjectClass
    has_approve_flats: bool
    phone_substitution: str
    telephony_data: DomclickTelephonyData
    has_custom_rate: bool
    layer_priority: Optional[int] = None
    with_renovation: bool
    show_contact_block: bool
    financing_sber: bool
    slug: str
    building: DomclickBuilding
    has_accreditation: bool
    has_big_check: bool


class DomclickPriceInfo(BaseModel):
    price: float
    square_price: float
    mortgage_price: Optional[float] = None
    square_price_for_year: float
    price_for_year: Optional[float] = None
    min_price: Optional[float] = None
    max_price: Optional[float] = None


class DomclickPhotos(BaseModel):
    class_name: Optional[str] = None
    url: str


class DomclickRenovation(BaseModel):
    type: str
    display_name: str


class DomclickHouse(BaseModel):
    floors: int


class DomclickDiscountStatus(BaseModel):
    status: Optional[str] = None
    value: Optional[float] = None


class DomclickLegalOptions(BaseModel):
    is_agent_owner_approved: bool
    is_owner: bool


class DomclickPessimization(BaseModel):
    pessimization_type: Optional[Any] = None
    pessimized: bool


class DomclickVideo(BaseModel):
    id: str
    url: str


class DomclickPerson(BaseModel):
    cas_id: int
    created_dt: str
    firstname: str
    fullname: str
    id: int
    lastname: str
    offers_sale_count: Optional[int] = None
    patronymic: Optional[str] = None
    phone: str
    photo_url: Optional[str] = None
    sbol_verified_state: str


class DomclickAgent(BaseModel):
    achievements: dict[str, bool]
    cas_id: Optional[int] = None
    full_name: str
    is_agent: bool
    is_sbol_verified: bool
    phone: str
    show_original_phone: bool
    person: Optional[DomclickPerson] = None


class DomclickCompany(BaseModel):
    address_fias_id: Optional[str] = None
    display_name: Optional[str] = None
    founded_at: Optional[str] = None
    id: Optional[int] = None
    is_showcase: Optional[bool] = None
    is_virtual: Optional[bool] = None
    legal_name: Optional[str] = None
    logo: Optional[str] = None
    phone: Optional[str] = None
    trade_name: Optional[str] = None
    type_id: Optional[int] = None


class DomclickSeller(BaseModel):
    agent: DomclickAgent
    company: DomclickCompany


class DomclickDisplayNameParts(BaseModel):
    guid: str
    subdomain: str
    title: str
    seo_uri: Optional[str] = None
    is_building: Optional[bool] = None


class DomclickSeoInfo(BaseModel):
    display_name_parts: list[DomclickDisplayNameParts]


class DomclickTariffOptions(BaseModel):
    big_card: Optional[bool] = None
    display_name: str
    name: str
    pin_color: Optional[bool] = None
    sort: int


class DomclickFlatComplex(BaseModel):
    id: int
    name: str
    building: Optional[DomclickBuilding] = None
    slug: str


class DomclickOffer(Offer):
    model_config = ConfigDict(extra='forbid')

    source: str
    payment_order_id: Optional[int] = None
    published_dt: str
    updated_dt: Optional[str] = None
    description: str
    house: DomclickHouse
    discount_status: Optional[DomclickDiscountStatus] = None
    is_auction: bool
    id: int
    address: DomclickAddress
    offers_count: Optional[int] = None
    object_info: DomclickObjectInfo
    photos: list[DomclickPhotos]
    video: Optional[list[DomclickVideo]] = None
    backwash: Optional[bool] = None
    renovation: Optional[DomclickRenovation] = None
    placement_type: Optional[list[str]] = None
    complex: Optional[DomclickComplex] = None
    developer: Optional[dict[Literal['name', 'logo'], str]] = None
    chat_available: bool
    min_rate: Optional[float] = None
    price_info: DomclickPriceInfo
    trade_in: bool
    has_big_check: Optional[bool] = None
    offer_type: OfferType
    slug: Optional[str] = None
    deal_type: DealType
    layout_id: Optional[str] = None
    status: int
    assignment_sale: Optional[bool] = None
    category: Optional[Category] = None
    duplicates_offer_count: Optional[int] = None
    has_advance_payment: Optional[bool] = None
    ipoteka_rate: Optional[float] = None
    is_placement_paid: Optional[bool] = None
    last_price_history_state: Optional[str] = None
    legal_options: Optional[DomclickLegalOptions] = None
    monthly_payment: Optional[int] = None
    payment: Optional[dict[Literal['name'], str]] = None
    pessimization: Optional[DomclickPessimization] = None
    rooms_offered: Optional[int] = None
    seo_info: Optional[DomclickSeoInfo] = None
    tariff_options: Optional[DomclickTariffOptions] = None
    seller: Optional[DomclickSeller] = None
    flat_complex: Optional[DomclickFlatComplex] = None
    is_exclusive: Optional[bool] = None
    online_show: Optional[bool] = None
